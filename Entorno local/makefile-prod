PATH_INFRA_PROD = cicd/infra/prod
PATH_CREDENTIALS_AWS = /home/japo/.aws
PATH_CREDENTIALS_GCP = /home/japo/.gcp
NAME_DOCKER = magnatedelared/acme_iaac_prod:2.0.0
NAME_DOCKERFILE = terraform_prod.Dockerfile
TF_VERSION = 1.1.7
URL_REPO_GITHUB = https://github.com/davidjapo/acme-iaac-aws-gcp-prod.git
NOMBRE_REPO_GITHUB = acme-iaac-aws-gcp-prod


#El stage all permite ejecutar de forma secuencial los stages definidos en él mismo. Si algo no funciona, revisa que el stage esté referenciado en all.
all: clean dockerize push integration_test

# Realiza una limpieza para crear el pipeline sin suciedad, eliminando aquellos directorios de cachés y temporales varios,
# además de eliminar la imagen creada en otras ocasiones:
clean:
	@echo ***CLEAN STEP***  ***THIS IS AN OLD STEP***
	cd $(PATH_INFRA_PROD) && rm -rf .terraform .terraform.lock.hcl && docker rmi --force $(NAME_DOCKER) 2> /dev/null

#Se realiza la creación de una imagen Docker para posteriormente ejecutar un contenedor que arranque la App.

# Permite modificar en tiempo de compilación de la imagen, el valor de la variable de entorno donde se ubica el nombre
# del directorio de la infraestructura de Terraform y que será utilizado por el script bash, además de modificar el valor
# del argumento que almacena la url del repositorio a clonar:
dockerize:
	@echo ***BUILD IMAGE WITH CUSTOMIZE GITHUB REPOSITORY PATH STEP***
	cd docker && \
	docker build -f $(NAME_DOCKERFILE) -t $(NAME_DOCKER) \
	--build-arg URL_REPO_GITHUB=$(URL_REPO_GITHUB) \
	--build-arg NOMBRE_REPO_GITHUB=$(NOMBRE_REPO_GITHUB) .

# Permite modificar en tiempo de compilación de la imagen, el valor del argumento que almacena la versión de Terraform a instalar:
build-tf:
	@echo ***BUILD IMAGE WITH CUSTOMIZE TERRAFORM VERSION STEP***
	cd docker && \
	docker build -f $(NAME_DOCKERFILE) -t $(NAME_DOCKER) \
	--build-arg TF_VERSION=$(TF_VERSION) \
	--build-arg URL_REPO_GITHUB=$(URL_REPO_GITHUB) \
	--build-arg NOMBRE_REPO_GITHUB=$(NOMBRE_REPO_GITHUB) .

# Una vez creada la imagen Docker, se procede a subirla al repositorio del registro canónico de Docker 'Docker Hub'
# Este paso requerirá de credenciales para DockerHub.
push:
	@echo ***PUSH TO DOCKER-HUB STEP***
	docker push $(NAME_DOCKER)

# Se realiza el test de integración, que consiste en eliminar en local la imagen de docker creada anteriormente y
# ejecutar la creación de un contenedor, forzando así la descarga de la imagen desde el registro canónico de Docker.
# Se le pasa un volúmen que contiene las credenciales de AWS y que será montado en el contenedor para uso de Terraform.
# Este paso ejecutará la creación de la infraestructura de Terraform definida, al aplicar un apply en el entorno de
# producción, por lo que es una acción intrusiva.
integration_test:
	@echo ***INTEGRATION TEST PRODUCTION ENVIRONMENT STEP***
	docker rmi --force $(NAME_DOCKER) 2> /dev/null && \
	docker run -i --rm -v $(PATH_CREDENTIALS_AWS):/root/.aws \
	-v $(PATH_CREDENTIALS_GCP):/root/.gcp $(NAME_DOCKER) prod.apply


# Se puede consultar el planning de la infraestructura. ¡ATENCION! Este paso no es intrusivo.
# Se comprueba el estado de la infraestructura que se almacena en un bucket S3 de ACME:
plan:
	@echo ***PLANNING IaaC STEP***
	docker rmi --force $(NAME_DOCKER) 2> /dev/null && \
	docker run --rm -v $(PATH_CREDENTIALS_AWS):/root/.aws \
	-v $(PATH_CREDENTIALS_GCP):/root/.gcp $(NAME_DOCKER) prod.plan

# Se puede modificar en tiempo de ejecución del contenedor, el valor de la variable de entorno donde se almacena la ruta
# al archivo de credenciales de GCP:
apply-custom-gcp:
	@echo ***APPLY IaaC WITH CUSTOMIZE GOOGLE ENVIRONMENT VARIABLE STEP***
	docker rmi --force $(NAME_DOCKER) 2> /dev/null && \
	docker run -i --rm -v $(PATH_CREDENTIALS_AWS):/root/.aws \
	-v $(PATH_CREDENTIALS_GCP):/root/.gcp_2022 \
	--env GOOGLE_APPLICATION_CREDENTIALS=/root/.gcp_2022/cred.json $(NAME_DOCKER) prod.apply

#Se destruye la infraestructura creada en el target integration_test:
destroy:
	@echo ***DESTROY IaaC STEP***
	docker rmi --force $(NAME_DOCKER) 2> /dev/null && \
	docker run -i --rm -v $(PATH_CREDENTIALS_AWS):/root/.aws \
	-v $(PATH_CREDENTIALS_GCP):/root/.gcp $(NAME_DOCKER) prod.destroy


# Se accederá al contenedor partiendo de la imagen creada en pasos anteriores, para testing:
access:
	@echo ***ACCESS TO CONTAINER STEP***
	docker run --rm -v $(PATH_CREDENTIALS_AWS):/root/.aws \
	-v $(PATH_CREDENTIALS_GCP):/root/.gcp \
	-it --entrypoint="bash" $(NAME_DOCKER)